import gurobipy as gp

# Create a Gurobi model
model = gp.Model("AircraftRouteSelection")

# Sets
C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Set of aircraft
F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Set of flights
M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Set of planned maintenances
Rc = {1: [1, 2], 2: [3], 3: [1, 3], 4: [2,4],5: [4, 5],6: [3,7],7:[6,8],8:[10,9],9:[9,4],10:[5,6]}  # Set of AOGs for each aircraft
L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # Set of routes,
D = [15,60,100,15,20,15,60,15,10,15]
# S = [1, 2, 3]  # Set of departure/arrival slots

# Sample 2D Parameters (Cost if aircraft c flies route l)
beta_cl = {(1, 1): 50, (1, 2): 60,(1, 3): 45,(1,4): 62,(1,5): 79,(1,6):85,(1,7):100,(1,8):95, (1,9):105,(1,10):68, (2, 1): 75, (2, 2): 65,(2,3): 80,(2,4):60,(2,5):100,(2,6):85,(2,7):100,(2,8):95, (2,9):105,(2,10):68,(3, 1): 65, (3, 2): 95,(3,3):85,(3,4): 110,(3,5):100,(3,6):85,(3,7):100,(3,8):95, (3,9):105,(3,10):68,(4,1):80,(4,2):75,(4,3):100,(4,4):120,(4,5):70,(4,6):85,(4,7):100,(4,8):95, (4,9):105,(4,10):68,(5,1):95,(5,2): 65,(5,3): 85,(5,4): 100,(5,5):90,(5,6):85,(5,7):100,(5,8):95, (5,9):105,(5,10):68,(6, 1): 62, (6, 2): 60,(6, 3): 95,(6,4): 79,(6,5): 50,(6,6):85,(6,7):100,(6,8):95, (6,9):105,(6,10):68,(7, 1): 100, (7, 2): 105,(7, 3): 95,(7,4): 62,(7,5): 79,(7,6):85,(7,7):100,(7,8):95, (7,9):60,(7,10):68,(8, 1): 100, (8, 2): 86,(8, 3): 95,(8,4): 85,(8,5): 79,(8,6):62,(8,7):100,(8,8):95, (8,9):105,(8,10):68,(9, 1): 79, (9, 2): 86,(9, 3): 95,(9,4): 75,(9,5): 79,(9,6):85,(9,7):100,(9,8):68, (9,9):105,(9,10):120,(10, 1): 79, (10, 2): 86,(10, 3): 95,(10,4): 100,(10,5): 79,(10,6):85,(10,7):75,(10,8):95, (10,9):105,(10,10):96}

# Sample 1D Parameters (Cost if flight f is cancelled)
alpha_f = {1: 86, 2: 75, 3: 96, 4: 0, 5: 95, 6: 105,7: 86, 8: 99, 9: 100, 10: 122}

# Sample matrix for delta_f_l (binary parameter)
delta_f_l = {(1, 1): 0, (1, 2): 1,(1, 3): 0,(1,4): 0,(1,5): 1,(1,6): 0,(1,7):0,(1,8):1, (1,9):0,(1,10):1, (2, 1): 1, (2, 2): 0,(2,3): 0,(2,4): 1,(2,5): 1,(2,6): 0,(2,7): 1,(2,8):0, (2,9):1,(2,10):0,(3, 1): 1, (3, 2): 0,(3,3):1,(3,4): 0,(3,5):0,(3,6):1,(3,7):0,(3,8):1, (3,9):0,(3,10):1,(4,1):0,(4,2):1,(4,3):0,(4,4):0,(4,5):0,(4,6):0,(4,7):1,(4,8):1, (4,9):1,(4,10):0,(5,1):0,(5,2): 1,(5,3): 0,(5,4): 1,(5,5):0,(5,6):1,(5,7):0,(5,8):1, (5,9):0,(5,10):1,(6, 1): 0, (6, 2): 0,(6, 3): 1,(6,4): 1,(6,5): 0,(6,6): 1,(6,7): 0,(6,8): 1, (6,9):0,(6,10):1,(7, 1): 0, (7, 2): 0,(7, 3): 1,(7,4): 0,(7,5): 1,(7,6): 1,(7,7): 0,(7,8): 1, (7,9): 0,(7,10): 1,(8, 1): 0, (8, 2): 1,(8, 3): 0,(8,4): 1,(8,5): 0,(8,6): 0,(8,7): 0,(8,8): 1, (8,9):0,(8,10): 1,(9, 1): 0, (9, 2): 1,(9, 3): 0,(9,4): 1,(9,5): 0,(9,6): 1,(9,7): 0,(9,8): 1, (9,9):1,(9,10): 1,(10, 1): 0, (10, 2): 1,(10, 3): 0,(10,4): 0,(10,5): 1,(10,6): 0,(10,7):1,(10,8):0, (10,9):1,(10,10):0}

# Sample matrix for delta_m_l (binary parameter)
delta_m_l = {(1, 1): 0, (1, 2): 1,(1, 3): 0,(1,4): 0,(1,5): 1,(1,6): 0,(1,7):0,(1,8):1, (1,9):0,(1,10):1, (2, 1): 1, (2, 2): 0,(2,3): 0,(2,4): 1,(2,5): 1,(2,6): 0,(2,7): 1,(2,8):0, (2,9):1,(2,10):0,(3, 1): 1, (3, 2): 0,(3,3):1,(3,4): 0,(3,5):0,(3,6):1,(3,7):0,(3,8):1, (3,9):0,(3,10):1,(4,1):0,(4,2):1,(4,3):0,(4,4):0,(4,5):0,(4,6):0,(4,7):1,(4,8):1, (4,9):1,(4,10):0,(5,1):0,(5,2): 1,(5,3): 0,(5,4): 1,(5,5):0,(5,6):1,(5,7):0,(5,8):1, (5,9):0,(5,10):1,(6, 1): 0, (6, 2): 0,(6, 3): 1,(6,4): 1,(6,5): 0,(6,6): 1,(6,7): 0,(6,8): 1, (6,9):0,(6,10):1,(7, 1): 0, (7, 2): 0,(7, 3): 1,(7,4): 0,(7,5): 1,(7,6): 1,(7,7): 0,(7,8): 1, (7,9): 0,(7,10): 1,(8, 1): 0, (8, 2): 1,(8, 3): 0,(8,4): 1,(8,5): 0,(8,6): 0,(8,7): 0,(8,8): 1, (8,9):0,(8,10): 1,(9, 1): 0, (9, 2): 1,(9, 3): 0,(9,4): 1,(9,5): 0,(9,6): 1,(9,7): 0,(9,8): 1, (9,9):1,(9,10): 1,(10, 1): 0, (10, 2): 1,(10, 3): 0,(10,4): 0,(10,5): 1,(10,6): 0,(10,7):1,(10,8):0, (10,9):1,(10,10):0}

# Sample matrix for delta_r_l (binary parameter)
delta_r_l = {(1, 1): 0, (1, 2): 1,(1, 3): 0,(1,4): 0,(1,5): 1,(1,6): 0,(1,7):0,(1,8):1, (1,9):0,(1,10):1, (2, 1): 1, (2, 2): 0,(2,3): 0,(2,4): 1,(2,5): 1,(2,6): 0,(2,7): 1,(2,8):0, (2,9):1,(2,10):0,(3, 1): 1, (3, 2): 0,(3,3):1,(3,4): 0,(3,5):0,(3,6):1,(3,7):0,(3,8):1, (3,9):0,(3,10):1,(4,1):0,(4,2):1,(4,3):0,(4,4):0,(4,5):0,(4,6):0,(4,7):1,(4,8):1, (4,9):1,(4,10):0,(5,1):0,(5,2): 1,(5,3): 0,(5,4): 1,(5,5):0,(5,6):1,(5,7):0,(5,8):1, (5,9):0,(5,10):1,(6, 1): 0, (6, 2): 0,(6, 3): 1,(6,4): 1,(6,5): 0,(6,6): 1,(6,7): 0,(6,8): 1, (6,9):0,(6,10):1,(7, 1): 0, (7, 2): 0,(7, 3): 1,(7,4): 0,(7,5): 1,(7,6): 1,(7,7): 0,(7,8): 1, (7,9): 0,(7,10): 1,(8, 1): 0, (8, 2): 1,(8, 3): 0,(8,4): 1,(8,5): 0,(8,6): 0,(8,7): 0,(8,8): 1, (8,9):0,(8,10): 1,(9, 1): 0, (9, 2): 1,(9, 3): 0,(9,4): 1,(9,5): 0,(9,6): 1,(9,7): 0,(9,8): 1, (9,9):1,(9,10): 1,(10, 1): 0, (10, 2): 1,(10, 3): 0,(10,4): 0,(10,5): 1,(10,6): 0,(10,7):1,(10,8):0, (10,9):1,(10,10):0}

# Sample values for us (Capacity of slot s)
us = {1: 6, 2: 7, 3: 60}

# Sample matrix for phi_sl (Number of times slot s is used by route l)
phi_sl = {(1, 1): 2, (1, 2): 3, (2, 1): 1, (2, 2): 2, (3, 1): 3, (3, 2): 1}

# Decision variables
xc_l = model.addVars(C, L, vtype=gp.GRB.BINARY, name="xc")  # Aircraft flies route (binary)
y_f = model.addVars(F, vtype=gp.GRB.BINARY, name="yf")  # Flight is cancelled (binary)
# Objective function
model.setObjective(
    gp.quicksum(alpha_f[f] * y_f[f] for f in F) +
    gp.quicksum(beta_cl[c, l] * xc_l[c, l] for c in C for l in L),
    sense=gp.GRB.MINIMIZE
)
model.addConstrs(
    gp.quicksum( xc_l[c, l] + y_f[c] for l in L) == 1 for f in F for c in C
)

model.addConstrs(
    gp.quicksum(delta_m_l[m, l] * xc_l[c, l] for l in L) <= 1 for m in M for c in C
)

model.addConstrs(
    gp.quicksum(delta_r_l[ r, l] * xc_l[c, l] for l in L) <= 1 for c in C for r in Rc[c]
)

model.addConstrs(
    gp.quicksum(xc_l[c, l] for l in L) <= 1 for c in C
)


# Solve the optimization problem
model.optimize()

# Print the results
if model.status == gp.GRB.OPTIMAL:
    print("Optimal Solution Found:")
    for c in C:
        for l in L:
            if xc_l[c, l].x > 0.5:
                    if l ==1:
                         print(f"Aircraft {c} flies Route {l}:KOLKATA TO MUMBAI")
                    elif l==2:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO BANGALORE")
                    elif l==3:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO CHENNAI")
                    elif l==4:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO DELHI")
                    elif l==5:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO DEHRADUN")
                    elif l==6:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO JAIPUR")
                    elif l==7:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO HYDERABAD")
                    elif l==8:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO AHMEDABAD")
                    elif l==9:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO CHANDIGARH")
                    elif l==10:
                          print(f"Aircraft {c} flies Route {l}:KOLKATA TO NAGPUR")
                    else:
                        print(f"Aircraft {c} flies Route {l}")
    for f in F:
        if y_f[f].x > 0.5:
            print(f"Flight {f} is canceled")                
                         
    print(f"Optimal Objective Value: {model.objVal}")
    
else:
    print("No optimal solution found.")

# Close the Gurobi model
model.dispose()
